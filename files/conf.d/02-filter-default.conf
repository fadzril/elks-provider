filter {
  if [type] == "GUI" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => [ "message", "%{HRDD_LOG}" ]
      overwrite => [ "message", "%{messages}"  ]
      add_tag => [ "HRDD" ]
    }
    mutate {
      rename => [ "message", "log"  ]
      remove_tag => [ "_grokparsefailure" ]
    }
  }

  if [type] == "BATCH" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns" ]
      match => [ "message", "%{INFORMATICA_LOG}" ]
      overwrite => [ "message", "%{messages}" ]
    }
    mutate {
      rename => [ "message", "log" ]
      remove_tag => [ "_grokparsefailure" ]
    }
  }

  if [type] == "REALTIME"{
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => [ "message", "%{TIBCO_LOG}" ]
      overwrite => [ "message", "%{messages}" ]
    }
    mutate {
      rename => [ "message", "log" ]
      remove_tag => [ "_grokparsefailure" ]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  if [type] == "HRDDSS"{
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => [ "message", "%{HRDDSS_LOG}" ]
      overwrite => [ "message", "%{messages}" ]
    }
    mutate {
      rename => [ "message", "log" ]
      remove_tag => [ "_grokparsefailure" ]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  if [type] == "tibco"{
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => [ "message", "%{TIBCO_LOG}" ]
      overwrite => [ "message", "%{messages}" ]
    }
    mutate {
      rename => [ "message", "log" ]
      remove_tag => [ "_grokparsefailure" ]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }

  if [type] == "tomcat" {
    multiline {
      patterns_dir => ["/etc/logstash/patterns"]
      pattern => "(^%{TOMCAT_DATESTAMP})|(^%{CATALINA_DATESTAMP})"
      negate => true
      what => "previous"
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS Z", "MMM dd, yyyy HH:mm:ss a" ]
    }
  }

  if [type] == "saftt" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => [ "message", "%{SAFTT_LOG}" ]
      overwrite => [ "message", "%{messages}" ]
    }
    mutate {
      rename => [ "message", "log" ]
      remove_tag => [ "_grokparsefailure" ]
    }

    #  mutate {
    #    tags => "saftt"
    #    replace => { "@message", "%{msg}" }
    #  }

    #  mutate {
    #    tags => "saftt-error"
    #    replace => { "@message", "%{error}" }
    #  }
  }
}
